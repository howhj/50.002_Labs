.include "lab2checkoff.jsim"
.include "nominal.jsim"

* 2-input nand: inputs are a and b, output is z
.subckt nand2 a b z
MPD1 z a 1 0 NENH sw=8 sl=1
MPD2 1 b 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=9 sl=1
MPU2 z b vdd vdd PENH sw=9 sl=1
.ends

* inverter: input is a, output is z
.subckt inv a z
MPD1 z a 0 0 NENH sw=16 sl=1
MPU1 z a vdd vdd PENH sw=16 sl=1
.ends

* 2-input nor: inputs are a and b, output is z
.subckt nor2 a b z
MPD1 z a 0 0 NENH sw=8 sl=1
MPD2 z b 0 0 NENH sw=8 sl=1
MPU1 z a 1 vdd PENH sw=9 sl=1
MPU2 1 b vdd vdd PENH sw=9 sl=1
.ends

* 2-input xor: input is a and b, output is z
.subckt xor2 a b z
* Build your own xor gate here
* BEGIN ANSWER
Xg a b 1 nor2
MPD1 2 b 0 0 NENH sw=2 sl=1
MPD2 z a 2 0 NENH sw=2 sl=1
MPD3 z 1 0 0 NENH sw=2 sl=1
MPU1 3 a vdd vdd PENH sw=4 sl=1
MPU2 3 b vdd vdd PENH sw=4 sl=1
MPU3 z 1 3 vdd PENH sw=4 sl=1
*END ANSWER
.ends

* 2-input xnor: input is a and b, output is z
.subckt xnor2 a b z
* Build your own xnor gate here
* BEGIN ANSWER
Xg a b 1 nand2
MPD1 2 a 0 0 NENH sw=2 sl=1
MPD2 2 b 0 0 NENH sw=2 sl=1
MPD3 z 1 2 0 NENH sw=2 sl=1
MPU1 z a 3 vdd PENH sw=4 sl=1
MPU2 3 b vdd vdd PENH sw=4 sl=1
MPU3 z 1 vdd vdd PENH sw=4 sl=1
*END ANSWER
.ends

* 3-input nand: inputs are a, b and c, output is z
.subckt nand3 a b c z
MPD1 z a 1 0 NENH sw=8 sl=1
MPD2 1 b 2 0 NENH sw=8 sl=1
MPD3 2 c 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=9 sl=1
MPU2 z b vdd vdd PENH sw=9 sl=1
MPU3 z c vdd vdd PENH sw=9 sl=1
.ends

* FA: 1-bit Full Adder circuit
* Input: a, b, ci 
* Output: s, co
.subckt FA a b ci s co
* write your FA circuitry here
* BEGIN ANSWER
Xs1 a b 1 xor2
Xs2 ci 1 s xor2
Xc1 a b 2 nand2
Xc2 b ci 3 nand2
Xc3 a ci 4 nand2
Xc4 2 3 4 co nand3
*END ANSWER
.ends


.subckt ADDER4 a3 a2 a1 a0 b3 b2 b1 b0 s4 s3 s2 s1 s0
Xbit0 a0 b0 0 s0 c0 FA
Xbit1 a1 b1 c0 s1 c1 FA
Xbit2 a2 b2 c1 s2 c2 FA
Xbit3 a3 b3 c2 s3 s4 FA
.ends

